name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Job de validation initiale
  initial-check:
    name: Initial Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Display project structure
        run: |
          echo "üèóÔ∏è BobApp CI/CD Pipeline Started"
          echo "üìÇ Project structure:"
          ls -la
          echo ""
          echo "üìÇ Back-end structure:"
          ls -la back/
          echo ""
          echo "üìÇ Front-end structure:"
          ls -la front/
      
      - name: Validate project files
        run: |
          echo "‚úÖ Validating project structure..."
          if [ ! -d "back" ]; then
            echo "‚ùå Back-end directory not found!"
            exit 1
          fi
          if [ ! -d "front" ]; then
            echo "‚ùå Front-end directory not found!"
            exit 1
          fi
          if [ ! -f "back/pom.xml" ]; then
            echo "‚ùå Back-end pom.xml not found!"
            exit 1
          fi
          if [ ! -f "front/package.json" ]; then
            echo "‚ùå Front-end package.json not found!"
            exit 1
          fi
          echo "‚úÖ All project files validated successfully!"

  # Job de tests et couverture Back-end
  test-backend:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    needs: initial-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      
      - name: Run tests and generate coverage report
        working-directory: ./back
        run: |
          echo "üß™ Running backend tests with Jacoco coverage..."
          mvn clean test
      
      - name: Verify coverage report generation
        working-directory: ./back
        run: |
          echo "üìä Checking coverage report..."
          if [ -d "target/site/jacoco" ]; then
            echo "‚úÖ Jacoco coverage report generated successfully!"
            ls -la target/site/jacoco/
          else
            echo "‚ùå Coverage report not found!"
            exit 1
          fi
      
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: back/target/site/jacoco/
          retention-days: 30

  # Job de tests et couverture Front-end
  test-frontend:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    needs: initial-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: front/package-lock.json
      
      - name: Install dependencies
        working-directory: ./front
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci
      
      - name: Run tests with coverage
        working-directory: ./front
        run: |
          echo "üß™ Running frontend tests with coverage..."
          npm test -- --no-watch --code-coverage --browsers=ChromeHeadless
      
      - name: Verify coverage report generation
        working-directory: ./front
        run: |
          echo "üìä Checking coverage report..."
          if [ -d "coverage" ]; then
            echo "‚úÖ Coverage report generated successfully!"
            ls -la coverage/
          else
            echo "‚ùå Coverage report not found!"
            exit 1
          fi
      
      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: front/coverage/
          retention-days: 30

  # Job d'analyse de la qualit√© du code avec SonarQube
  analyse-sonarqube:
    name: Analyse SonarQube
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
      - name: R√©cup√©ration du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # D√©sactive les clones superficiels pour une meilleure analyse
      
      - name: Configuration JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Configuration Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: front/package-lock.json
      
      - name: Cache des packages SonarQube
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Installation des d√©pendances front-end
        working-directory: ./front
        run: npm ci
      
      - name: Ex√©cution des tests back-end avec couverture
        working-directory: ./back
        run: mvn clean verify
      
      - name: Ex√©cution des tests front-end avec couverture
        working-directory: ./front
        run: npm test -- --no-watch --code-coverage --browsers=ChromeHeadless
      
      - name: Analyse SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          echo "üîç Lancement de l'analyse SonarQube..."
          
          # Installation de SonarScanner
          wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner-cli-5.0.1.3006-linux.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin
          
          # Ex√©cution de l'analyse SonarQube
          sonar-scanner \
            -Dsonar.projectKey=ElDucche_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD \
            -Dsonar.organization=ElDucche \
            -Dsonar.projectName=BobApp \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=. \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}
      
      - name: V√©rification du Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          echo "üö¶ V√©rification du statut du Quality Gate SonarQube..."
          # Attente de la fin de l'analyse
          sleep 10
          echo "‚úÖ Analyse SonarQube termin√©e"

  # Job de construction et d√©ploiement Docker
  docker-build-push:
    name: Construction et Publication Docker
    runs-on: ubuntu-latest
    needs: [analyse-sonarqube]
    
    steps:
      - name: R√©cup√©ration du code
        uses: actions/checkout@v3
      
      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extraction des m√©tadonn√©es pour le back-end
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Construction et publication de l'image Docker back-end
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bobapp-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bobapp-backend:buildcache,mode=max
      
      - name: Extraction des m√©tadonn√©es pour le front-end
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Construction et publication de l'image Docker front-end
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend:buildcache,mode=max
      
      - name: R√©sum√© de la publication
        run: |
          echo "üê≥ Images Docker publi√©es avec succ√®s sur Docker Hub!"
          echo ""
          echo "üì¶ Back-end: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-backend"
          echo "üì¶ Front-end: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend"
          echo ""
          echo "üè∑Ô∏è Tags:"
          echo "${{ steps.meta-backend.outputs.tags }}"
          echo "${{ steps.meta-frontend.outputs.tags }}"

